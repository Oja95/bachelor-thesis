
@software{hon_prof,
	author = {R.,Warburton},
	title = {Honest Profiler. GitHub repository},
	rights = {{MIT}},
	url = {https://github.com/jvm-profiling-tools/honest-profiler},
	shorttitle = {honest-profiler},
	publisher = {jvm-profiling-tools},
	lastchecked = {21.02.2018},
	date = {2018-02-20},
	file = {Snapshot:/home/tiit/Zotero/storage/VDEB9D5J/honest-profiler.html:text/html},
}

@online{getitimer2,
	title = {getitimer(2) - Linux manual page},
	url = {http://man7.org/linux/man-pages/man2/setitimer.2.html},
	lastchecked = {26.02.2018},
	file = {getitimer(2) - Linux manual page:/home/tiit/Zotero/storage/ZLQ2G5X2/setitimer.2.html:text/html}
}

@online{linux_time,
	title = {time(7) - Linux manual page},
	url = {http://man7.org/linux/man-pages/man7/time.7.html},
	lastchecked = {26.02.2018},
	file = {time(7) - Linux manual page:/home/tiit/Zotero/storage/CK6AYV2G/time.7.html:text/html}
}

@article{mytkowicz_evaluating_2010,
	title = {Evaluating the accuracy of Java profilers. ACM SIGPLAN Notices: ACM},
	issn = {03621340},
	url = {http://portal.acm.org/citation.cfm?doid=1809028.1806618},
	abstract = {Performance analysts proﬁle their programs to ﬁnd methods that are worth optimizing: the “hot” methods. This paper shows that four commonly-used Java proﬁlers (xprof , hprof , jproﬁle, and yourkit) often disagree on the identity of the hot methods. If two proﬁlers disagree, at least one must be incorrect. Thus, there is a good chance that a proﬁler will mislead a performance analyst into wasting time optimizing a cold method with little or no performance improvement.},
	pages = {1-11},
	year=2010,
	journaltitle = {{ACM} {SIGPLAN} Notices},
	author = {T. et al, Mytkowicz},
	lastchecked = {23.03.2018},
	date = {2010-05-12},
	langid = {english},
	file = {Mytkowicz et al. - 2010 - Evaluating the accuracy of Java profilers.pdf:/home/tiit/Zotero/storage/2AAA44XA/Mytkowicz et al. - 2010 - Evaluating the accuracy of Java profilers.pdf:application/pdf}
}

@online{gregg_flame,
	title = {Flame Graphs},
	url = {http://www.brendangregg.com/flamegraphs.html},
	author = {Gregg, B.},
	lastchecked = {23.04.2018},
	file = {Flame Graphs:/home/tiit/Zotero/storage/5NLC55VD/flamegraphs.html:text/html}
}

@online{wakart_psychosomatic_2015,
	title = {Psychosomatic, Lobotomy, Saw: Safepoints: Meaning, Side Effects and Overheads},
	url = {https://psy-lob-saw.blogspot.com.ee/2015/12/safepoints.html},
	shorttitle = {Psychosomatic, Lobotomy, Saw},
	titleaddon = {Psychosomatic, Lobotomy, Saw},
	author = {N., Wakart},
	lastchecked = {23.04.2018},
	date = {2015-12-14},
	keywords = {Java, safepoint, Compiler, Jabberwocky, {JMH}, {JVM} Internals, Latency},
	file = {Blogspot Snapshot:/home/tiit/Zotero/storage/5ZVC9DCG/safepoints.html:text/html}
}

@online{wakart_psychosomatic_2016,
	title = {Psychosomatic, Lobotomy, Saw: Why (Most) Sampling Java Profilers Are Fucking Terrible},
	url = {https://psy-lob-saw.blogspot.com.ee/2016/02/why-most-sampling-java-profilers-are.html},
	shorttitle = {Psychosomatic, Lobotomy, Saw},
	titleaddon = {Psychosomatic, Lobotomy, Saw},
	author = {N., Wakart},
	lastchecked = {23.04.2018},
	date = {2016-02-24},
	keywords = {Java, {JVM}, Profiling, safepoint, {JMH}, {JVisualVM}, Measurement, {YourKit}},
	file = {Blogspot Snapshot:/home/tiit/Zotero/storage/QNBRQN9L/why-most-sampling-java-profilers-are.html:text/html}
}

@online{jstack,
	title = {jstack documentation},
	url = {https://docs.oracle.com/javase/7/docs/technotes/tools/share/jstack.html},
	author = {Oracle},
	lastchecked = {24.04.2018},
	file = {jstack - Stack Trace:/home/tiit/Zotero/storage/W2EV68L7/jstack.html:text/html}
}

@online{wakart_java,
	title = {Java Profiling from the Ground Up},
	url = {https://zeroturnaround.com/rebellabs/java-profiling-from-the-ground-up-by-nitsan-wakart/},
	abstract = {We continue our series of Virtual {JUG} session recaps with “Java Profiling from the Ground Up” by Nitsan Wakart. Nitsan is the lead performance engineer at Azul Systems, working on the Zing Java {VIrtual} Machine. So if you have any questions about C4 pauseless garbage collection or any {JVM} internals, Nitsan is a great person to chat to. Additionally, he’s an avid open source fan, being the main contributor to the {JCTools} project, the implementations of concurrent and lockless collections, queues and so on. 

Without further ado, let’s dig into what we gleaned from this session about Java profiling...},
	titleaddon = {zeroturnaround.com},
	author = {N.,Wakart},
	lastchecked = {29.04.2018},
	langid = {english}
}

@online{visualvm,
	title = {VisualVM. Source code repository},
	url = {http://visualvm.sourcearchive.com/documentation/0.20080728/Stacks_8c-source.html},
	lastchecked = {30.04.2018},
	file = {visualvm 0.20080728, Stacks_8c-source.html:/home/tiit/Zotero/storage/2W4NQA8U/Stacks_8c-source.html:text/html}
}

@online{jvmtm,
	title = {{JVM}({TM}) Tool Interface 1.2.3 documentation},
	url = {https://docs.oracle.com/javase/8/docs/platform/jvmti/jvmti.html},
	lastchecked = {01.05.2018},
	author = {Oracle},
	file = {JVM(TM) Tool Interface 1.2.3:/home/tiit/Zotero/storage/FEWNUU7M/jvmti.html:text/html}
}

@book{stevens_advanced_2013,
	title = {Advanced Programming in the {UNIX} Environment},
	isbn = {978-0-321-63800-7},
	abstract = {For more than twenty years, serious C programmers have relied on one book for practical, in-depth knowledge of the programming interfaces that drive the {UNIX} and Linux kernels: W. Richard Stevens’   Advanced Programming in the {UNIX}® Environment  . Now, once again, Rich’s colleague Steve Rago has thoroughly updated this classic work. The new third edition supports today’s leading platforms, reflects new technical advances and best practices, and aligns with Version 4 of the Single {UNIX} Specification.   Steve carefully retains the spirit and approach that have made this book so valuable. Building on Rich’s pioneering work, he begins with files, directories, and processes, carefully laying the groundwork for more advanced techniques, such as signal handling and terminal I/O. He also thoroughly covers threads and multithreaded programming, and socket-based {IPC}.   This edition covers more than seventy new interfaces, including {POSIX} asynchronous I/O, spin locks, barriers, and {POSIX} semaphores. Most obsolete interfaces have been removed, except for a few that are ubiquitous. Nearly all examples have been tested on four modern platforms: Solaris 10, Mac {OS} X version 10.6.8 (Darwin 10.8.0), {FreeBSD} 8.0, and Ubuntu version 12.04 (based on Linux 3.2).   As in previous editions, you’ll learn through examples, including more than ten thousand lines of downloadable, {ISO} C source code. More than four hundred system calls and functions are demonstrated with concise, complete programs that clearly illustrate their usage, arguments, and return values. To tie together what you’ve learned, the book presents several chapter-length case studies, each reflecting contemporary environments.      Advanced Programming in the {UNIX}® Environment   has helped generations of programmers write code with exceptional power, performance, and reliability. Now updated for today’s systems, this third edition will be even more valuable.},
	pagetotal = {1032},
	publisher = {Addison-Wesley},
	author = {W.R., Stevens},
	date = {2013-06-10},
	langid = {english},
	year = 2013
	keywords = {Computers / Operating Systems / {UNIX}}
}

@online{whitham_jack,
	title = {Profiling versus tracing},
	url = {https://www.jwhitham.org/2016/02/profiling-versus-tracing.html},
	abstract = {Dr Jack Whitham},
	author = {J.,Whitham},
	year =2016,
	lastchecked = {03.05.2018},
	file = {Snapshot:/home/tiit/Zotero/storage/LVL8S63P/profiling-versus-tracing.html:text/html}
}

@software{torvalds_linux:_2018,
	title = {Linux kernel source tree. GitHub resository},
	url = {https://github.com/torvalds/linux},
	shorttitle = {linux},
	author = {L.,Torvalds},
	lastchecked = {03.05.2018},
	date = {2018-05-03}
}

@online{signal-safety7,
	title = {signal-safety(7) - Linux manual page},
	url = {http://man7.org/linux/man-pages/man7/signal-safety.7.html},
	lastchecked = {08.05.2018},
	file = {signal-safety(7) - Linux manual page:/home/tiit/Zotero/storage/HGMJ5TS6/signal-safety.7.html:text/html}
}

@online{understanding_jit,
	title = {Understanding Java {JIT} Compilation with {JITWatch}, Part 1},
	url = {http://www.oracle.com/technetwork/articles/java/architect-evans-pt1-2266278.html},
	author = {B.,Evans},
	lastchecked = {09.05.2018},
	file = {Understanding Java JIT Compilation with JITWatch, Part 1:/home/tiit/Zotero/storage/RTDL7NPY/architect-evans-pt1-2266278.html:text/html}
}
